#pragma once
#include "../types.h"

enum : u8
{
  CRTC_REGISTER_HORIZONTAL_TOTAL = 0x00,
  CRTC_REGISTER_HORIZONTAL_DISPLAY_END = 0x01,
  CRTC_REGISTER_HORIZONTAL_BLANKING_START = 0x02,
  CRTC_REGISTER_HORIZONTAL_BLANKING_END = 0x03,
  CRTC_REGISTER_HORIZONTAL_SYNC_START = 0x04,
  CRTC_REGISTER_HORIZONTAL_SYNC_END = 0x05,
  CRTC_REGISTER_VERTICAL_TOTAL = 0x06,
  CRTC_REGISTER_OVERFLOW = 0x07,
  CRTC_REGISTER_PRESET_ROW_SCAN = 0x08,
  CRTC_REGISTER_CHARACTER_CELL_HEIGHT = 0x09,
  CRTC_REGISTER_TEXT_CURSOR_START = 0x0A,
  CRTC_REGISTER_TEXT_CURSOR_END = 0x0B,
  CRTC_REGISTER_START_ADDRESS_HIGH = 0x0C,
  CRTC_REGISTER_START_ADDRESS_LOW = 0x0D,
  CRTC_REGISTER_TEXT_CURSOR_ADDRESS_HIGH = 0x0E,
  CRTC_REGISTER_TEXT_CURSOR_ADDRESS_LOW = 0x0F,
  CRTC_REGISTER_VERTICAL_SYNC_START = 0x10,
  CRTC_REGISTER_VERTICAL_SYNC_END = 0x11,
  CRTC_REGISTER_VERTICAL_DISPLAY_END = 0x12,
  CRTC_REGISTER_OFFSET = 0x13,
  CRTC_REGISTER_UNDERLINE_ROW_SCANLINE = 0x14,
  CRTC_REGISTER_VERTICAL_BLANK_START = 0x15,
  CRTC_REGISTER_VERTICAL_BLANK_END = 0x16,
  CRTC_REGISTER_MODE_CONTROL = 0x17,
  CRTC_REGISTER_LINE_COMPARE = 0x18,
  MAX_VGA_CRTC_REGISTER = 0x18
};

enum : u8
{
  GRAPHICS_REGISTER_SET_RESET = 0x00,
  GRAPHICS_REGISTER_SET_RESET_ENABLE = 0x01,
  GRAPHICS_REGISTER_COLOR_COMPARE = 0x02,
  GRAPHICS_REGISTER_DATA_ROTATE = 0x03,
  GRAPHICS_REGISTER_READ_MAP_SELECT = 0x04,
  GRAPHICS_REGISTER_MODE = 0x05,
  GRAPHICS_REGISTER_MISCELLANEOUS = 0x06,
  GRAPHICS_REGISTER_COLOR_DONT_CARE = 0x07,
  GRAPHICS_REGISTER_BIT_MASK = 0x08,
  MAX_VGA_GRAPHICS_REGISTER = 0x08,

  GRAPHICS_REGISTER_SET_RESET_MASK = 0x0F,
  GRAPHICS_REGISTER_SET_RESET_ENABLE_MASK = 0x0F,
  GRAPHICS_REGISTER_COLOR_COMPARE_MASK = 0x0F,
  GRAPHICS_REGISTER_READ_MAP_SELECT_MASK = 0x03,
  GRAPHICS_REGISTER_COLOR_DONT_CARE_MASK = 0x0F,
};

#define GRAPHICS_REGISTER_DATA_ROTATE_COUNT(val) (val & 0x07)
#define GRAPHICS_REGISTER_DATA_ROTATE_LOGIC_OP(val) ((val >> 3) & 0x03)
#define GRAPHICS_REGISTER_MISCELLANEOUS_GRAPHICS_MODE(val) ((val & 0x01) != 0)
#define GRAPHICS_REGISTER_MISCELLANEOUS_CHAIN_ODD_EVEN_ENABLE(val) ((val & 0x02) != 0)
#define GRAPHICS_REGISTER_MISCELLANEOUS_MEMORY_MAP_SELECT(val) ((val >> 2) & 0x03)
#define GRAPHICS_REGISTER_MODE_WRITE_MODE(val) ((val & 0x03))
#define GRAPHICS_REGISTER_MODE_READ_MODE(val) (((val >> 3) & 0x01))
#define GRAPHICS_REGISTER_MODE_HOST_ODD_EVEN(val) (((val >> 4) & 0x01) != 0)
#define GRAPHICS_REGISTER_MODE_SHIFT_REG(val) (((val >> 5) & 0x01) != 0)
#define GRAPHICS_REGISTER_MODE_SHIFT_256(val) (((val >> 6) & 0x01) != 0)

enum : u8
{
  ATTRIBUTE_REGISTER_PALETTE = 0x00,    // 16 entries
  ATTRIBUTE_REGISTER_CONTROLLER_MODE = 0x10,
  ATTRIBUTE_REGISTER_OVERSCAN_COLOR = 0x11,
  ATTRIBUTE_REGISTER_COLOR_PLANE_ENABLE = 0x12,
  ATTRIBUTE_REGISTER_PIXEL_PANNING = 0x13,
  ATTRIBUTE_REGISTER_COLOR_SELECT = 0x14,
  MAX_VGA_ATTRIBUTE_REGISTER = 0x14,

  ATTRIBUTE_REGISTER_COLOR_PLANE_ENABLE_MASK = 0x0F
};

enum : u8
{
  SEQUENCER_REGISTER_RESET = 0x00,
  SEQUENCER_REGISTER_CLOCKING_MODE = 0x01,
  SEQUENCER_REGISTER_PLANE_MASK = 0x02,
  SEQUENCER_REGISTER_CHARACTER_MAP_SELECT = 0x03,
  SEQUENCER_REGISTER_MEMORY_MODE = 0x04,
  MAX_VGA_SEQUENCER_REGISTER = 0x04
};

#define SEQUENCER_REGISTER_MEMORY_MODE_EXTENDED_MEMORY(val) ((val & 0x02) != 0)
#define SEQUENCER_REGISTER_MEMORY_MODE_HOST_ODD_EVEN(val) ((val & 0x04) != 0)
#define SEQUENCER_REGISTER_MEMORY_MODE_CHAIN_4(val) ((val & 0x08) != 0)

inline u32 Convert6BitColorTo8Bit(uint32 color)
{
  u8 r = Truncate8(color);
  u8 g = Truncate8(color >> 8);
  u8 b = Truncate8(color >> 16);

  // Convert 6-bit color to 8-bit color by shifting low bits to high bits (00123456 -> 12345612).
  r = (r << 2) | (r >> 4);
  g = (g << 2) | (g >> 4);
  b = (b << 2) | (b >> 4);

  return (color & 0xFF000000) | ZeroExtend32(r) | (ZeroExtend32(g) << 8) | (ZeroExtend32(b) << 16);
}

inline u32 ConvertBGR555ToRGB24(uint16 color)
{
  u8 b = Truncate8(color & 31);
  u8 g = Truncate8((color >> 5) & 31);
  u8 r = Truncate8((color >> 10) & 31);

  // 00012345 -> 1234545
  b = (b << 3) | (b >> 3);
  g = (g << 3) | (g >> 3);
  r = (r << 3) | (r >> 3);

  return (color & 0xFF000000) | ZeroExtend32(r) | (ZeroExtend32(g) << 8) | (ZeroExtend32(b) << 16);
}

inline u32 ConvertBGR565ToRGB24(uint16 color)
{
  u8 b = Truncate8(color & 31);
  u8 g = Truncate8((color >> 5) & 63);
  u8 r = Truncate8((color >> 11) & 31);

  // 00012345 -> 1234545 / 00123456 -> 12345656
  b = (b << 3) | (b >> 3);
  g = (g << 2) | (g >> 4);
  r = (r << 3) | (r >> 3);

  return (color & 0xFF000000) | ZeroExtend32(r) | (ZeroExtend32(g) << 8) | (ZeroExtend32(b) << 16);
}
